// <auto-generated />
using System;
using Growth.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Growth.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250413200617_AddRestOfRoutines")]
    partial class AddRestOfRoutines
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Growth.Domain.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("RoutineId")
                        .HasColumnType("integer")
                        .HasColumnName("routine_id");

                    b.Property<int?>("RoutineTaskId")
                        .HasColumnType("integer")
                        .HasColumnName("routine_task_id");

                    b.HasKey("Id")
                        .HasName("pk_goals");

                    b.HasIndex("RoutineId")
                        .HasDatabaseName("ix_goals_routine_id");

                    b.HasIndex("RoutineTaskId")
                        .HasDatabaseName("ix_goals_routine_task_id");

                    b.ToTable("goals", "public");
                });

            modelBuilder.Entity("Growth.Domain.Routine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("TotalDays")
                        .HasColumnType("integer")
                        .HasColumnName("total_days");

                    b.HasKey("Id")
                        .HasName("pk_routines");

                    b.ToTable("routines", "public");
                });

            modelBuilder.Entity("Growth.Domain.RoutineTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("Repetition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("repetition");

                    b.Property<int?>("RoutineId")
                        .HasColumnType("integer")
                        .HasColumnName("routine_id");

                    b.HasKey("Id")
                        .HasName("pk_routine_tasks");

                    b.HasIndex("RoutineId")
                        .HasDatabaseName("ix_routine_tasks_routine_id");

                    b.ToTable("routine_tasks", "public");
                });

            modelBuilder.Entity("Growth.Domain.Goal", b =>
                {
                    b.HasOne("Growth.Domain.Routine", null)
                        .WithMany("Goals")
                        .HasForeignKey("RoutineId")
                        .HasConstraintName("fk_goals_routines_routine_id");

                    b.HasOne("Growth.Domain.RoutineTask", null)
                        .WithMany("Goals")
                        .HasForeignKey("RoutineTaskId")
                        .HasConstraintName("fk_goals_routine_tasks_routine_task_id");

                    b.OwnsOne("Growth.Domain.Metric", "Progress", b1 =>
                        {
                            b1.Property<int>("GoalId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("progress_name");

                            b1.Property<double>("Value")
                                .HasColumnType("double precision")
                                .HasColumnName("progress_value");

                            b1.HasKey("GoalId");

                            b1.ToTable("goals", "public");

                            b1.WithOwner()
                                .HasForeignKey("GoalId")
                                .HasConstraintName("fk_goals_goals_id");
                        });

                    b.OwnsOne("Growth.Domain.Metric", "Target", b1 =>
                        {
                            b1.Property<int>("GoalId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("target_name");

                            b1.Property<double>("Value")
                                .HasColumnType("double precision")
                                .HasColumnName("target_value");

                            b1.HasKey("GoalId");

                            b1.ToTable("goals", "public");

                            b1.WithOwner()
                                .HasForeignKey("GoalId")
                                .HasConstraintName("fk_goals_goals_id");
                        });

                    b.Navigation("Progress")
                        .IsRequired();

                    b.Navigation("Target")
                        .IsRequired();
                });

            modelBuilder.Entity("Growth.Domain.RoutineTask", b =>
                {
                    b.HasOne("Growth.Domain.Routine", null)
                        .WithMany("Tasks")
                        .HasForeignKey("RoutineId")
                        .HasConstraintName("fk_routine_tasks_routines_routine_id");

                    b.OwnsOne("Growth.Domain.TaskSchedule", "TaskSchedule", b1 =>
                        {
                            b1.Property<int>("RoutineTaskId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<TimeSpan>("Duration")
                                .HasColumnType("interval")
                                .HasColumnName("task_schedule_duration");

                            b1.Property<DateTimeOffset>("FromTime")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("task_schedule_from_time");

                            b1.Property<DateTimeOffset>("ToTime")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("task_schedule_to_time");

                            b1.HasKey("RoutineTaskId");

                            b1.ToTable("routine_tasks", "public");

                            b1.WithOwner()
                                .HasForeignKey("RoutineTaskId")
                                .HasConstraintName("fk_routine_tasks_routine_tasks_id");
                        });

                    b.OwnsOne("Growth.Domain.TaskStreak", "TaskStreak", b1 =>
                        {
                            b1.Property<int>("RoutineTaskId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<int>("CurrentStreakDays")
                                .HasColumnType("integer")
                                .HasColumnName("task_streak_current_streak_days");

                            b1.Property<int>("MaxStreakDays")
                                .HasColumnType("integer")
                                .HasColumnName("task_streak_max_streak_days");

                            b1.HasKey("RoutineTaskId");

                            b1.ToTable("routine_tasks", "public");

                            b1.WithOwner()
                                .HasForeignKey("RoutineTaskId")
                                .HasConstraintName("fk_routine_tasks_routine_tasks_id");
                        });

                    b.Navigation("TaskSchedule")
                        .IsRequired();

                    b.Navigation("TaskStreak")
                        .IsRequired();
                });

            modelBuilder.Entity("Growth.Domain.Routine", b =>
                {
                    b.Navigation("Goals");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Growth.Domain.RoutineTask", b =>
                {
                    b.Navigation("Goals");
                });
#pragma warning restore 612, 618
        }
    }
}
