// <auto-generated />
using System;
using Growth.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Growth.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250902150146_AddPlantsTable")]
    partial class AddPlantsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Growth.Domain.Routine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_routines");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_routines_user_id");

                    b.ToTable("routines", "public");
                });

            modelBuilder.Entity("Growth.Domain.RoutineTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("Repetition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("repetition");

                    b.Property<int>("RoutineId")
                        .HasColumnType("integer")
                        .HasColumnName("routine_id");

                    b.HasKey("Id")
                        .HasName("pk_routine_tasks");

                    b.HasIndex("RoutineId")
                        .HasDatabaseName("ix_routine_tasks_routine_id");

                    b.ToTable("routine_tasks", "public");
                });

            modelBuilder.Entity("Growth.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", "public");
                });

            modelBuilder.Entity("Growth.Domain.Routine", b =>
                {
                    b.HasOne("Growth.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_routines_users_user_id");

                    b.OwnsMany("Plant", "Plants", b1 =>
                        {
                            b1.Property<int>("RoutineId")
                                .HasColumnType("integer")
                                .HasColumnName("routine_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("ExperiencePoints")
                                .HasColumnType("integer")
                                .HasColumnName("experience_points");

                            b1.Property<int>("Health")
                                .HasColumnType("integer")
                                .HasColumnName("health");

                            b1.Property<int>("Level")
                                .HasColumnType("integer")
                                .HasColumnName("level");

                            b1.HasKey("RoutineId", "Id")
                                .HasName("pk_plant");

                            b1.ToTable("plant", "public");

                            b1.WithOwner("Routine")
                                .HasForeignKey("RoutineId")
                                .HasConstraintName("fk_plant_routines_routine_id");

                            b1.OwnsOne("GardenPosition", "GardenPosition", b2 =>
                                {
                                    b2.Property<int>("PlantRoutineId")
                                        .HasColumnType("integer")
                                        .HasColumnName("routine_id");

                                    b2.Property<int>("PlantId")
                                        .HasColumnType("integer")
                                        .HasColumnName("id");

                                    b2.Property<int>("X")
                                        .HasColumnType("integer")
                                        .HasColumnName("garden_position_x");

                                    b2.Property<int>("Y")
                                        .HasColumnType("integer")
                                        .HasColumnName("garden_position_y");

                                    b2.HasKey("PlantRoutineId", "PlantId");

                                    b2.ToTable("plant", "public");

                                    b2.WithOwner()
                                        .HasForeignKey("PlantRoutineId", "PlantId")
                                        .HasConstraintName("fk_plant_plant_routine_id_id");
                                });

                            b1.Navigation("GardenPosition")
                                .IsRequired();

                            b1.Navigation("Routine");
                        });

                    b.Navigation("Plants");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Growth.Domain.RoutineTask", b =>
                {
                    b.HasOne("Growth.Domain.Routine", "Routine")
                        .WithMany("Tasks")
                        .HasForeignKey("RoutineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_routine_tasks_routines_routine_id");

                    b.OwnsMany("Growth.Domain.Goal", "Goals", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("RoutineTaskId")
                                .HasColumnType("integer")
                                .HasColumnName("routine_task_id");

                            b1.HasKey("Id")
                                .HasName("pk_goal");

                            b1.HasIndex("RoutineTaskId")
                                .HasDatabaseName("ix_goal_routine_task_id");

                            b1.ToTable("goal", "public");

                            b1.WithOwner()
                                .HasForeignKey("RoutineTaskId")
                                .HasConstraintName("fk_goal_routine_tasks_routine_task_id");

                            b1.OwnsOne("Growth.Domain.Metric", "Progress", b2 =>
                                {
                                    b2.Property<int>("GoalId")
                                        .HasColumnType("integer")
                                        .HasColumnName("id");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("progress_name");

                                    b2.Property<double>("Value")
                                        .HasColumnType("double precision")
                                        .HasColumnName("progress_value");

                                    b2.HasKey("GoalId");

                                    b2.ToTable("goal", "public");

                                    b2.WithOwner()
                                        .HasForeignKey("GoalId")
                                        .HasConstraintName("fk_goal_goal_id");
                                });

                            b1.OwnsOne("Growth.Domain.Metric", "Target", b2 =>
                                {
                                    b2.Property<int>("GoalId")
                                        .HasColumnType("integer")
                                        .HasColumnName("id");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("target_name");

                                    b2.Property<double>("Value")
                                        .HasColumnType("double precision")
                                        .HasColumnName("target_value");

                                    b2.HasKey("GoalId");

                                    b2.ToTable("goal", "public");

                                    b2.WithOwner()
                                        .HasForeignKey("GoalId")
                                        .HasConstraintName("fk_goal_goal_id");
                                });

                            b1.Navigation("Progress");

                            b1.Navigation("Target")
                                .IsRequired();
                        });

                    b.OwnsOne("Growth.Domain.TaskSchedule", "TaskSchedule", b1 =>
                        {
                            b1.Property<int>("RoutineTaskId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<DateTimeOffset>("FromTime")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("task_schedule_from_time");

                            b1.Property<DateTimeOffset>("ToTime")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("task_schedule_to_time");

                            b1.HasKey("RoutineTaskId");

                            b1.ToTable("routine_tasks", "public");

                            b1.WithOwner()
                                .HasForeignKey("RoutineTaskId")
                                .HasConstraintName("fk_routine_tasks_routine_tasks_id");
                        });

                    b.OwnsOne("Growth.Domain.TaskStreak", "TaskStreak", b1 =>
                        {
                            b1.Property<int>("RoutineTaskId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<int>("CurrentStreakDays")
                                .HasColumnType("integer")
                                .HasColumnName("task_streak_current_streak_days");

                            b1.Property<int>("MaxStreakDays")
                                .HasColumnType("integer")
                                .HasColumnName("task_streak_max_streak_days");

                            b1.HasKey("RoutineTaskId");

                            b1.ToTable("routine_tasks", "public");

                            b1.WithOwner()
                                .HasForeignKey("RoutineTaskId")
                                .HasConstraintName("fk_routine_tasks_routine_tasks_id");
                        });

                    b.Navigation("Goals");

                    b.Navigation("Routine");

                    b.Navigation("TaskSchedule")
                        .IsRequired();

                    b.Navigation("TaskStreak")
                        .IsRequired();
                });

            modelBuilder.Entity("Growth.Domain.Routine", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
